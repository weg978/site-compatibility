#!/bin/bash

# NAME : site-compatibility
# DESC : 하모니카에서 제공하는 공공기관 및 금융 사이트 호환 프로그램 설치 지원 프로그램

SERVER_URL="apt.hamonikr.org"

SKEL_AUTOSTART="/etc/skel/.config/autostart"
DOWN_PATH="/tmp/deb"
LOG_PATH="/var/log/site-compatibility.log"

echo "[$(date +%Y-%m-%d\ %H:%M:%S)] start site-compatibility" > $LOG_PATH

#PKG_LIST+="ahnlab-safe-transaction
#anysign4pc
#crosswebex
#delfino-g3
#ipinside-lws
#magicline4npiz
#ntsmagicxmlsecuritynp
#nprotect-online-security
#raonk-2018
#veraport-g3
#xecureweb-unified-plugin
#"

PKG_LIST+="ahnlab-safe-transaction
anysign4pc
delfino-g3
ipinside-lws
magicline4npiz
nprotect-online-security
raonk-2018
veraport-g3
xecureweb-unified-plugin
"


# check permission
if [[ $UID != 0 ]]
then
  clear
  zenity --error --title="프로그램 실행 권한 오류" \
    --text="이 프로그램 실행을 위해서 루트 권한이 필요합니다.\n\nsudo $0 를 사용하세요" \
    --width=300 --height=200
  exit 1
fi


###### before/after install function start ######

function fnt_before_ahnlab_safe_transaction {
  echo "fnt_before_ahnlab_safe_transaction"

  sudo apt-get install -y openssl \
    libnss3-tools \
    ethtool \
    dmidecode \
    hdparm \
    nautilus \
    cpuid \
    dconf-tools \
    libnetfilter-conntrack3 \
    libnfnetlink0 \
    net-tools
}
function fnt_after_ahnlab_safe_transaction {
  echo "fnt_after_ahnlab_safe_transaction"
}

function fnt_before_anysign4pc {
  echo "fnt_before_anysign4pc"
}
function fnt_after_anysign4pc {
  echo "fnt_after_anysiign4pc"

  for userid in $(ls /home)
  do
    sudo cp -r /root/.AnySign4PC /home/$userid/
    sudo chown -R $userid:$userid /home/$userid/.AnySign4PC
  done

  sudo systemctl daemon-reload
  sleep 1
  sudo systemctl enable anysign.service
  sleep 1
  sudo systemctl start anysign.service
}

function fnt_before_crosswebex {
  echo "fnt_before_crosswebex"

  sudo apt-get install -y libldap-2.4-2 \
    libgtk-3-0 \
    libwebkitgtk-3.0-0 \
    libwebkitgtk-1.0-0 \
    libgtk2.0-0 \
    libnss3-tools
}
function fnt_after_crosswebex {
  echo "fnt_after_crosswebex"
}

function fnt_before_delfino_g3 {
  echo "fnt_before_delfino_g3"

  if [[ ! -d /var/lib/update-notifier ]]
  then
    mkdir -p /var/lib/update-notifier
  fi
}
function fnt_after_delfino_g3 {
  echo "fnt_after_delfino_g3"

  fnt_copy_desktop_file "delfino.desktop"
}

function fnt_before_ipinside_lws {
  echo "fnt_before_ipinside_lws"
}
function fnt_after_ipinside_lws {
  echo "fnt_after_ipinside_lws"

  fnt_copy_desktop_file "ipinside-lws.desktop"
}

function fnt_before_magicline4nx {
  echo "fnt_before_magicline4nx"
}
function fnt_after_magicline4nx {
  echo "fnt_after_magicline4nx"

  fnt_copy_desktop_file "magicline4nx.desktop"
}

function fnt_before_magicline4npiz {
  echo "fnt_before_magicline4npiz"
}
function fnt_after_magicline4npiz {
  echo "fnt_after_magicline4npiz"

  fnt_copy_desktop_file "magicline4npiz.desktop"
}

function fnt_before_ntsmagicxmlsecuritynp {
  echo "fnt_before_ntsmagicxmlsecuritynp"
}
function fnt_after_ntsmagicxmlsecuritynp {
  echo "fnt_after_ntsmagicxmlsecuritynp"

  fnt_copy_desktop_file "ntsmagicxmlsecuritynp.desktop"
}

function fnt_before_nprotect_online_security {
  echo "fnt_before_nprotect_online_security"
}
function fnt_after_nprotect_online_security {
  echo "fnt_after_nprotect_online_security"
}

function fnt_before_raonk_2018 {
  echo "fnt_before_raonk_2018"
}
function fnt_after_raonk_2018 {
  echo "fnt_after_raonk_2018"

  fnt_copy_desktop_file "raonk.desktop"
  fnt_copy_desktop_file "raonkupload.desktop"
}

function fnt_before_veraport_g3 {
  echo "fnt_before_veraport_g3"
}
function fnt_after_veraport_g3 {
  echo "fnt_after_veraport_g3"

  fnt_copy_desktop_file "veraport.desktop"
}

function fnt_before_xecureweb_unified_plugin {
  echo "fnt_before_xecureweb_unified_plugin"
  
  if [[ ! -d /usr/lib64/mozilla/plugins ]]
  then
    mkdir -p /usr/lib64/mozilla/plugins
  fi
}
function fnt_after_xecureweb_unified_plugin {
  echo "fnt_after_xecureweb_unified_plugin"
}

###### before/after install function end ######


function fnt_copy_desktop_file {
  sudo cp /usr/share/applications/$1 $SKEL_AUTOSTART/$1
  sudo chmod 755 $SKEL_AUTOSTART/$1
  sudo chown root:root $SKEL_AUTOSTART/$1

  for userid in $(ls /home)
  do
    AUTOSTART="/home/$userid/.config/autostart"

    sudo cp /usr/share/applications/$1 $AUTOSTART/$1
    sudo chmod 755 $AUTOSTART/$1
    sudo chown $userid:$userid $AUTOSTART/$1
  done
}

function fnt_delete_desktop_file {
  sudo rm $SKEL_AUTOSTART/$1

  for userid in $(ls /home)
  do
    sudo rm /home/$userid/.config/autostart/$1
  done
}


function fnt_pkg_install {
  pkg_name=$(echo $1 | sed 's/-/_/g')

  # preinst
  fnt_before_$pkg_name

  # install
  sudo apt-get install -y $1

  # postinst
  fnt_after_$pkg_name
}

function fnt_pkg_remove {
  sudo apt-get --purge remove -y $1
}


function fnt_ck_network {
  nslookup $SERVER_URL | grep authoritative > /dev/null 2>&1
  if [ $? -eq 1 ]
  then
    zenity --error --title="저장소 접속 불가" \
      --text="하모니카 저장소에 접속할 수 없습니다.\n인터넷 연결을 확인해 주세요.\n\n인터넷 연결이 이상이 없는 경우\n>하모니카 커뮤니티에 문의해 주시기 바랍니다.\n\n하모니카 커뮤니티 : https://hamonikr.org" \
      --width=300 --height=200
    exit 1
  fi
}

function fnt_create_menu {
  choice=$(zenity --list --radiolist \
    --text="설치 혹은 삭제 항목을 선택후 확인 버튼을 클릭하세요" \
    --column="선택" --column="항목" \
    "install" "설치" "remove" "삭제" \
    --width="300" --height="200" \
    --ok-label="확인" \
    --cancel-label="종료")
}


function fnt_create_list_menu {
  if [[ "$1" == "" ]]; then return; fi

  if [[ "$1" == "install" ]]
  then

    ok_lbl="설치"

    # installed list
    for pkg in $PKG_LIST
    do
      if [[ "" != "$(dpkg -l $pkg)" ]]
      then
        local AllPkgsArr+=("" "$pkg" "$(dpkg -l $pkg | grep ii | awk '{print $3}')" "O")
      fi
    done

    # not installed list
    for pkg in $PKG_LIST
    do
      if [[ "" == "$(dpkg -l $pkg)" ]]
      then
        local AllPkgsArr+=("" "$pkg" "-" "-")
      fi
    done

  elif [[ "$1" == "remove" ]]
  then

    ok_lbl="삭제"

    # installed list
    for pkg in $PKG_LIST
    do
      if [[ "" != "$(dpkg -l $pkg)" ]]
      then
        local AllPkgsArr+=("" "$pkg" "$(dpkg -l $pkg | grep ii | awk '{print $3}')" "O")
      fi
    done

  fi

  select_pkgs=$(zenity --list --checklist \
    --text="$ok_lbl를 원하는 프로그램을 선택하신 후 $ok_lbl 버튼을 클릭하세요." \
    --column "선택" --column "패키지명" --column "버전" --column "설치유무" \
    "${AllPkgsArr[@]}" \
    --width=360 --height=480 \
    --ok-label="$ok_lbl" \
    --cancel-label="취소"
  )
}


function main {
  while true
  do
    # select install/remove
    fnt_create_menu
  
    if [[ "설치" == "$choice" ]]
    then
   
      # check server connection
      fnt_ck_network || echo "[$(date +%Y-%m-%d\ %H:%M:%S)][Err] Failed network checking" > $LOG_PATH
 
      sudo apt-get update || {
        echo "[$(date +%Y-%m-%d\ %H:%M:%S)][Err] Failed apt-get update" > $LOG_PATH

        zenity --error --title="업데이트 실패" \
          --text="업데이트 목록을 갱신을 실패하였습니다.\n잠시후 다시 시도해 주시기 바랍니다.\n\n동일한 문제가 반복적으로 발생하면\n하모니카 커뮤니티로 문의해 주시기 바랍니다.\n\n하모니카 커뮤니티 : https://hamonikr.org" \
          --width=300 --height=200
        exit
      }

      # create menu
      fnt_create_list_menu "install"

    elif [[ "삭제" == "$choice" ]]
    then
  
      # create menu
      fnt_create_list_menu "remove"
 
    else
      exit
    fi


    # 목록확인
    IFS='|' read -ra s_pkgs <<< "$select_pkgs"

    # 설치유뮤확인
    for pkg in "${s_pkgs[@]}"
    do

      if [[ "설치" == "$choice" ]]
      then
        ck=$(dpkg -l $pkg | grep ii)

        if [[ "" == $ck ]]
        then

          fnt_pkg_install $pkg

        fi
      fi

      if [[ "삭제" == "$choice" ]]
      then

        fnt_pkg_remove $pkg

      fi

    done

    # 취소
    if [[ 0 -lt "${#s_pkgs[@]}" ]]
    then

      if zenity --question --no-wrap \
        --height=150 --width=280 \
        --title "$choice 완료" \
        --text="사이트 호환성 지원 프로그램 $choice가 완료되었습니다.\n\n재부팅 이후 적용 됩니다.\n\n재부팅 하시겠습니까?"
      then
        reboot
      else
        exit
      fi
    fi

  done
}

main
